@page "/clients1"
@using BlazorApp1.DataAccess
@using BlazorApp1.DataAccess.Model

<h3>Список клиентов</h3>

@if (_clients == null)
{
    <p><em>Loading...</em></p>
}
else if (_clients.Count == 0)
{
    <p><em>Нет клиентов</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Телефон</th>
                <th>Email</th>
                <th>Адрес</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in _clients)
            {
                <tr>
                    <td>@client.FullName</td>
                    <td>@client.PhoneNumber</td>
                    <td>@client.Email</td>
                    <td>@client.Address</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => LoadClientDetails(client.Id)">
                            Открыть карточку
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (_selectedClient != null)
{
    <div class="card mt-4">
        <div class="card-header">
            <h4>@_selectedClient.FullName</h4>
        </div>
        <div class="card-body">
            <p><strong>Телефон:</strong> @_selectedClient.PhoneNumber</p>
            <p><strong>Email:</strong> @_selectedClient.Email</p>
            <p><strong>Адрес:</strong> @_selectedClient.Address</p>
        </div>
    </div>

    <h4>Список обращений</h4>

    @if (_repairs == null || _repairs.Count == 0)
    {
        <p><em>Нет данных о ремонтах</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Дата начала</th>
                    <th>Дата окончания</th>
                    <th>Мастер</th>
                    <th>Стоимость</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var repair in _repairs)
                {
                    <tr>
                        <td>@repair.StartDate.ToString("yyyy-MM-dd")</td>
                        <td>@(repair.EndDate.HasValue ? repair.EndDate.Value.ToString("yyyy-MM-dd") : "В процессе")</td>
                        <td>@repair.Master?.FullName</td>
                        <td>@repair.TotalCost:₽</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<Client>? _clients;
    private Client? _selectedClient;
    private List<Repair>? _repairs;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string query = @"
            query {
                client {
                    id
                    fullName
                    phoneNumber
                    email
                    address
                }
            }";

            _clients = await Query.ExecuteQueryReturnListAsync<Client>("client", query);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching clients: {ex.Message}");
        }
    }

    private async Task LoadClientDetails(long clientId)
    {
        try
        {
            string query = $@"
        query {{
            client(
                where: {{
                    id: {{
                        eq: {clientId}
                    }}
                }}
            ) {{
                id
                fullName
                phoneNumber
                email
                address
                equipments {{
                    id
                    repairs {{
                        id
                        startDate
                        endDate
                        totalCost
                        master {{
                            fullName
                        }}
                    }}
                }}
            }}
        }}";

            var clients = await Query.ExecuteQueryReturnListAsync<Client>("client", query);

            if (clients != null && clients.Any())
            {
                _selectedClient = clients.First();
                _repairs = _selectedClient.Equipments?
                                .Where(e => e.Repairs != null)
                                .SelectMany(e => e.Repairs!)
                                .ToList();
            }
            else
            {
                _selectedClient = null;
                _repairs = null;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching client details: {ex.Message}");
        }
    }
}
